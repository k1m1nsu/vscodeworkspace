# set은 순서가 없다. 중복을 허용하지않는다. changeable(mutable) , iterable(not ordered)
# 순서가 없기에 인덱스로 접근할 수 없다. 

s = {} # 이렇게 하면 딕셔너리가 생성된다!!! set이 아니다.

s = set() # 이렇게 비어있는 set 을 생성할 수 있다.

ls = [1,2,3]

s = set(ls) # {1, 2, 3}

s2 = {3,4,5}

s & s2 # 교집합 구하기 {3}

s.intersection(s2) # 교집합 구하기 {3}

s | s2 # {1, 2, 3, 4, 5}  합집합 구하기 

s.union(s2) # {1, 2, 3, 4, 5} 합집합 구하기

s - s2 # {1, 2} 차집합 구하기

s.add(4) # {1, 2, 3, 4} 하나씩만 더할 수 있다.

#여러개를 한번에 더하고 싶으면

s.update(s2) # {1, 2, 3, 4, 5}

# 특정 값을 제거하고 싶으면 

s.remove(5) # {1, 2, 3, 4}


# set을 다루다 보면 정렬이 자동으로 되는 경우들이 많아 정렬을 보장한다고 생각할 수 있는데 정렬을 보장하지않는다.
# 예를 들어 지금 내가 사용하는 3.10.12 버전을 기준으로
my_set = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5} # 이렇게 입력한 데이터가 {1, 2, 3, 4, 5, 6, 9} 자동으로 정렬되어있다.

# 하지만 이런 경우에는 정렬이 되어있지 않았다.
my_set = {x*7 for x in range(20)} # {0, 133, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119, 126}

# 정렬을 하고 싶으면 이렇게 해라
sorted_set = sorted(my_set)

